CREATE DATABASE OFO_db;

USE OFO_db;

-- Create a table: Customers
CREATE TABLE Customers (
customer_id INT PRIMARY KEY, customer_name VARCHAR(20), city VARCHAR(20), gender VARCHAR(10)
);

-- Inserted Data using Table Data Import Wizard

SELECT * FROM Customers;

-- Create a table: Restaurants
CREATE TABLE Restaurants (
restaurant_id INT PRIMARY KEY, restaurant_name VARCHAR(20)
);

-- Inserted Data using Table Data Import Wizard

SELECT * FROM Restaurants;

-- Create a table: Menu_Items
CREATE TABLE Menu_Items (
item_id INT PRIMARY KEY, restaurant_id INT, item_name VARCHAR(30), price INT
);

ALTER TABLE Menu_Items ADD CONSTRAINT FK_Menu_Items_Restaurants FOREIGN KEY (restaurant_id) REFERENCES Restaurants (restaurant_id);

-- Inserted Data using Table Data Import Wizard

SELECT * FROM Menu_Items;

-- Create a table: Orders
CREATE TABLE Orders (
order_id INT PRIMARY KEY, customer_id INT, restaurant_id INT, item_id INT, quantity INT, order_date DATE
);

ALTER TABLE Orders ADD CONSTRAINT FK_Orders_Customers FOREIGN KEY (customer_id) REFERENCES Customers (customer_id);
ALTER TABLE Orders ADD CONSTRAINT FK_Orders_Restaurants FOREIGN KEY (restaurant_id) REFERENCES Restaurants (restaurant_id);
ALTER TABLE Orders ADD CONSTRAINT FK_Orders_Menu_Items FOREIGN KEY (item_id) REFERENCES Menu_Items (item_id);

-- Inserted Data using Table Data Import Wizard

SELECT * FROM Orders;

-- Count of Customers per City
SELECT city, COUNT(*) AS count_of_customers
FROM Customers
GROUP BY city
ORDER BY count_of_customers DESC;

-- Count of Male and Female Customers
SELECT gender, COUNT(*) AS count_of_customers
FROM Customers
GROUP BY gender;

-- Name and price of all food items costing more than Rs. 200 (Premium Category Foods)
SELECT item_name, price
FROM Menu_Items
WHERE price > 200;

-- Top 3 Costliest Food Items (Premium Cost Food Items)
SELECT item_name, price
FROM Menu_Items
ORDER BY price DESC
LIMIT 3;

-- Top 3 Cheapest Food Items (Budget Friendly Food Items)
SELECT item_name, price
FROM Menu_Items
ORDER BY price ASC
LIMIT 3;

-- Show all orders along with the restaurant name from which they were placed
SELECT o.order_id, r.restaurant_name
FROM Orders AS o
INNER JOIN Restaurants AS r
ON o.restaurant_id = r.restaurant_id;

-- Show customer names and order dates for orders placed in January 2025
SELECT c.customer_name, o.order_date, o.order_id
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
WHERE o.order_date BETWEEN '2025-01-01' AND '2025-01-31'
ORDER BY o.order_date;

-- Count how many orders each customers has placed
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.customer_name, c.customer_id;

-- Top 5 Customers based on order count
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.customer_name, c.customer_id
ORDER BY total_orders DESC
LIMIT 5;

-- Show Total Revenue earned from each city (City-wise Total Revenue)
SELECT c.city, SUM(m.price*o.quantity) AS total_revenue
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
INNER JOIN Menu_Items AS m
ON o.item_id = m.item_id
GROUP BY c.city
ORDER BY total_revenue DESC;

-- Top 3 Cities by Revenue
SELECT c.city, SUM(m.price*o.quantity) AS total_revenue
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
INNER JOIN Menu_Items AS m
ON o.item_id = m.item_id
GROUP BY c.city
ORDER BY total_revenue DESC
LIMIT 3;

-- Bottom 3 Cities by Revenue
SELECT c.city, SUM(m.price*o.quantity) AS total_revenue
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
INNER JOIN Menu_Items AS m
ON o.item_id = m.item_id
GROUP BY c.city
ORDER BY total_revenue ASC
LIMIT 3;

-- Total Orders per City
SELECT c.city, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.city
ORDER BY total_orders DESC;

-- Top 3 Cities by Total Orders
SELECT c.city, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.city
ORDER BY total_orders DESC
LIMIT 3;

-- Bottom 3 Cities by Total Orders
SELECT c.city, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.city
ORDER BY total_orders ASC
LIMIT 3;

-- Cities with more than 150 total orders
SELECT c.city, COUNT(o.order_id) AS total_orders
FROM Customers AS c
INNER JOIN Orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.city
HAVING COUNT(o.order_id) > 150;

-- Revenue generated by each food item
SELECT m.item_name, SUM(m.price*o.quantity) AS total_revenue
FROM Menu_Items AS m
INNER JOIN Orders AS o
ON m.item_id = o.item_id
GROUP BY m.item_name
ORDER BY total_revenue DESC;

-- Top 3 Food Items by Revenue generated
SELECT m.item_name, SUM(m.price*o.quantity) AS total_revenue
FROM Menu_Items AS m
INNER JOIN Orders AS o
ON m.item_id = o.item_id
GROUP BY m.item_name
ORDER BY total_revenue DESC
LIMIT 3;

-- Bottom 3 Food Items by Revenue generated
SELECT m.item_name, SUM(m.price*o.quantity) AS total_revenue
FROM Menu_Items AS m
INNER JOIN Orders AS o
ON m.item_id = o.item_id
GROUP BY m.item_name
ORDER BY total_revenue ASC
LIMIT 3;


-- Food items that earned more than 30000 in Total Revenue
SELECT m.item_name, SUM(m.price*o.quantity) AS total_revenue
FROM Menu_Items AS m
INNER JOIN Orders AS o
ON m.item_id = o.item_id
GROUP BY m.item_name
HAVING total_revenue > 30000
ORDER BY total_revenue DESC;

-- Show all menu items, price along with average price of all items
SELECT item_name, price, (SELECT AVG(price) FROM Menu_Items) AS avg_price
FROM Menu_Items
ORDER BY price DESC;

-- Show all menu items, price that are greater than average price of all items
SELECT item_name, price
FROM Menu_Items
WHERE price > (SELECT AVG(price) FROM Menu_Items);

-- Monthly Order Trends
SELECT MONTH(order_date) AS month_number, MONTHNAME(order_date) AS order_month, COUNT(order_id) AS total_orders
FROM Orders
GROUP BY MONTH(order_date), MONTHNAME(order_date)
ORDER BY month_number;

-- Top 3 Months based on Total Orders
SELECT MONTH(order_date) AS month_number, MONTHNAME(order_date) AS order_month, COUNT(order_id) AS total_orders
FROM Orders
GROUP BY MONTH(order_date), MONTHNAME(order_date)
ORDER BY total_orders DESC
LIMIT 3;

-- Bottom 3 Months based on Total Orders
SELECT MONTH(order_date) AS month_number, MONTHNAME(order_date) AS order_month, COUNT(order_id) AS total_orders
FROM Orders
GROUP BY MONTH(order_date), MONTHNAME(order_date)
ORDER BY total_orders ASC
LIMIT 3;

-- Count of Orders
CREATE VIEW `Count_of_Orders` AS
SELECT COUNT(order_id) AS count_of_orders
FROM Orders;

SELECT * FROM `Count_of_Orders`;

-- Ranking Food Items based on its price from highest to lowest
CREATE VIEW `Ranking_Food_Price` AS
SELECT item_name, price, DENSE_RANK() OVER (ORDER BY price DESC) AS ranking_food_price
FROM Menu_Items;

SELECT * FROM `Ranking_Food_Price`;

-- Restaurants and Food Items available
DELIMITER $$

CREATE PROCEDURE Restaurant_Food_Items()
BEGIN
	SELECT r.restaurant_name, m.item_name
    FROM Restaurants AS r
    INNER JOIN Menu_Items AS m ON
    r.restaurant_id = m.restaurant_id;
END $$

DELIMITER ;

-- Customer Information
DELIMITER $$

CREATE PROCEDURE Customer_Info(IN a INT)
BEGIN
	SELECT * FROM Customers WHERE customer_id = a;
END $$

DELIMITER ;

-- Order Information
DELIMITER $$

CREATE PROCEDURE Order_Info(IN b INT)
BEGIN
	SELECT o.order_id, o.order_date, c.customer_id, c.customer_name, m.item_name, o.quantity, m.price*o.quantity AS total_amount
    FROM Customers AS c
    INNER JOIN Orders AS o
    ON c.customer_id = o.customer_id
    INNER JOIN Menu_Items AS m
    ON o.item_id = m.item_id
    WHERE o.order_id = b;
END $$

DELIMITER ;

-- Call by Procedures
CALL Restaurant_Food_Items()
CALL Customer_Info(5)
CALL Order_Info(3)